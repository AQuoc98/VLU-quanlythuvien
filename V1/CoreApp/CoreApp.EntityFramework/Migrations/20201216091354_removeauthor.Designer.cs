// <auto-generated />
using System;
using CoreApp.EntityFramework.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CoreApp.EntityFramework.Migrations
{
    [DbContext(typeof(CoreAppDbContext))]
    [Migration("20201216091354_removeauthor")]
    partial class removeauthor
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CoreApp.EntityFramework.Models.CoreColumn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("DataTypeId");

                    b.Property<Guid?>("EnumId");

                    b.Property<bool>("IsForeignKey");

                    b.Property<bool>("IsPrimaryKey");

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.Property<string>("NameDict")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool>("Searchable");

                    b.Property<bool>("Sortable");

                    b.Property<string>("SqlName")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("SqlScript");

                    b.Property<string>("TableAlias")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<Guid>("TableId");

                    b.HasKey("Id");

                    b.HasIndex("DataTypeId");

                    b.HasIndex("TableId");

                    b.ToTable("CoreColumns");
                });

            modelBuilder.Entity("CoreApp.EntityFramework.Models.CoreConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("DataType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<Guid>("GroupId");

                    b.Property<string>("InputType")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool>("IsNeedEncrypt");

                    b.Property<string>("Label")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("Sort");

                    b.Property<string>("Value")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("CoreConfigs");
                });

            modelBuilder.Entity("CoreApp.EntityFramework.Models.CoreConfigGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Label")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.Property<int?>("Sort");

                    b.HasKey("Id");

                    b.ToTable("CoreConfigGroups");
                });

            modelBuilder.Entity("CoreApp.EntityFramework.Models.CoreCredential", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("CredentialTypeId");

                    b.Property<string>("Identifier")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Secret")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CredentialTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("CoreCredentials");
                });

            modelBuilder.Entity("CoreApp.EntityFramework.Models.CoreCredentialType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("CoreCredentialTypes");
                });

            modelBuilder.Entity("CoreApp.EntityFramework.Models.CoreDataType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("CoreDataTypes");
                });

            modelBuilder.Entity("CoreApp.EntityFramework.Models.CoreEnum", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Invisible");

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("CoreEnums");
                });

            modelBuilder.Entity("CoreApp.EntityFramework.Models.CoreEnumValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<Guid>("EnumId");

                    b.Property<string>("Image")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.Property<string>("Slug")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("EnumId");

                    b.ToTable("CoreEnumValues");
                });

            modelBuilder.Entity("CoreApp.EntityFramework.Models.CoreEventLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("EventId");

                    b.Property<string>("LogLevel")
                        .HasMaxLength(255);

                    b.Property<string>("Logger")
                        .HasMaxLength(255);

                    b.Property<string>("Message");

                    b.HasKey("Id");

                    b.ToTable("CoreEventLogs");
                });

            modelBuilder.Entity("CoreApp.EntityFramework.Models.CoreMenu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Href")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("Icon")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<bool>("IsActived");

                    b.Property<Guid?>("ModuleId");

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.Property<Guid?>("ParentId");

                    b.Property<int>("Position");

                    b.Property<string>("TitleDict")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<Guid?>("ViewId");

                    b.HasKey("Id");

                    b.ToTable("CoreMenus");
                });

            modelBuilder.Entity("CoreApp.EntityFramework.Models.CoreModule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsActived");

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("CoreModules");
                });

            modelBuilder.Entity("CoreApp.EntityFramework.Models.CorePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.Property<string>("NameDict")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("Position");

                    b.HasKey("Id");

                    b.ToTable("CorePermissions");
                });

            modelBuilder.Entity("CoreApp.EntityFramework.Models.CoreRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsActived");

                    b.Property<bool>("IsAdmin");

                    b.Property<bool>("IsSuperAdmin");

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("CoreRoles");
                });

            modelBuilder.Entity("CoreApp.EntityFramework.Models.CoreRoleModulePermission", b =>
                {
                    b.Property<Guid>("RoleId");

                    b.Property<Guid>("ModuleId");

                    b.Property<Guid>("PermissionId");

                    b.HasKey("RoleId", "ModuleId", "PermissionId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("PermissionId");

                    b.ToTable("CoreRoleModulePermissions");
                });

            modelBuilder.Entity("CoreApp.EntityFramework.Models.CoreTable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Alias")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("ModuleId");

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.Property<string>("SqlName")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("CoreTables");
                });

            modelBuilder.Entity("CoreApp.EntityFramework.Models.CoreUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Address")
                        .HasMaxLength(500);

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool>("Gender");

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("CoreUsers");
                });

            modelBuilder.Entity("CoreApp.EntityFramework.Models.CoreUserRole", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("CoreUserRoles");
                });

            modelBuilder.Entity("CoreApp.EntityFramework.Models.CoreView", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FromSql");

                    b.Property<bool>("IsActived");

                    b.Property<Guid>("ModuleId");

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.Property<string>("OrderSql");

                    b.Property<string>("SelectSql");

                    b.Property<string>("WhereSql");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("CoreViews");
                });

            modelBuilder.Entity("CoreApp.EntityFramework.Models.CoreViewColumn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("ColumnId");

                    b.Property<bool>("IsActived");

                    b.Property<int>("Position");

                    b.Property<Guid>("ViewId");

                    b.Property<bool>("Visible");

                    b.Property<string>("Width")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("ColumnId");

                    b.HasIndex("ViewId");

                    b.ToTable("CoreViewColumns");
                });

            modelBuilder.Entity("CoreApp.EntityFramework.Models.CoreViewOrderCondition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("ColumnId");

                    b.Property<string>("ColumnName")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Direction")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("ViewId");

                    b.HasKey("Id");

                    b.ToTable("CoreViewOrderConditions");
                });

            modelBuilder.Entity("CoreApp.EntityFramework.Models.CoreViewSearchCondition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("ColumnId");

                    b.Property<string>("Condition")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<Guid?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Operator")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<Guid?>("UpdatedBy");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Value")
                        .HasMaxLength(500);

                    b.Property<Guid>("ViewId");

                    b.HasKey("Id");

                    b.ToTable("CoreViewSearchConditions");
                });

            modelBuilder.Entity("CoreApp.EntityFramework.Models.CoreViewSpecialCondition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Column")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Condition")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Operator")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<Guid>("RoleId");

                    b.Property<string>("Value")
                        .HasMaxLength(2000)
                        .IsUnicode(false);

                    b.Property<string>("ViewIds")
                        .HasMaxLength(2000)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("CoreViewSpecialConditions");
                });

            modelBuilder.Entity("CoreApp.EntityFramework.Models.DoBook", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AuthorId");

                    b.Property<Guid>("CatalogId");

                    b.Property<Guid?>("DoReservationBookId");

                    b.Property<string>("ISBN")
                        .HasMaxLength(30);

                    b.Property<string>("Image");

                    b.Property<string>("Language")
                        .HasMaxLength(500);

                    b.Property<int>("NumberofPages");

                    b.Property<Guid>("PublishierId");

                    b.Property<string>("Subject")
                        .HasMaxLength(500);

                    b.Property<string>("Title")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("CatalogId");

                    b.HasIndex("DoReservationBookId");

                    b.HasIndex("PublishierId");

                    b.ToTable("DoBooks");
                });

            modelBuilder.Entity("CoreApp.EntityFramework.Models.DoBookItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Barcode")
                        .HasMaxLength(20);

                    b.Property<Guid>("BookId");

                    b.Property<DateTime>("BorrowedDate");

                    b.Property<Guid?>("DoBookLendingId");

                    b.Property<DateTime>("DueDate");

                    b.Property<Guid>("FormatId");

                    b.Property<bool>("IsReferenceOnly");

                    b.Property<int>("Price");

                    b.Property<DateTime>("PublicationDate");

                    b.Property<Guid>("RackId");

                    b.Property<short>("Status");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("DoBookLendingId");

                    b.HasIndex("FormatId");

                    b.HasIndex("RackId");

                    b.ToTable("DoBookItems");
                });

            modelBuilder.Entity("CoreApp.EntityFramework.Models.DoBookLending", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("BorrowedDate");

                    b.Property<DateTime>("DueDate");

                    b.Property<string>("Note")
                        .HasMaxLength(50);

                    b.Property<DateTime>("PunishDate");

                    b.Property<DateTime>("ReturnDate");

                    b.HasKey("Id");

                    b.ToTable("DoBookLendings");
                });

            modelBuilder.Entity("CoreApp.EntityFramework.Models.DoCatalog", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.HasKey("ID");

                    b.ToTable("DoCatalogs");
                });

            modelBuilder.Entity("CoreApp.EntityFramework.Models.DoDistrict", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Location")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.Property<string>("ProviceCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<Guid?>("ProvinceId");

                    b.Property<string>("Type")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("DoDistricts");
                });

            modelBuilder.Entity("CoreApp.EntityFramework.Models.DoFormat", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.HasKey("ID");

                    b.ToTable("DoFormats");
                });

            modelBuilder.Entity("CoreApp.EntityFramework.Models.DoMember", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(500);

                    b.Property<Guid?>("DoBookLendingId");

                    b.Property<Guid?>("DoReservationBookId");

                    b.Property<string>("MemberCode")
                        .HasMaxLength(50);

                    b.Property<Guid>("MemberGroupId");

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.Property<string>("Phone")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("DoBookLendingId");

                    b.HasIndex("DoReservationBookId");

                    b.HasIndex("MemberGroupId");

                    b.ToTable("DoMembers");
                });

            modelBuilder.Entity("CoreApp.EntityFramework.Models.DoMemberGroup", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.HasKey("ID");

                    b.ToTable("DoMemberGroups");
                });

            modelBuilder.Entity("CoreApp.EntityFramework.Models.DoPolicy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BookNumber");

                    b.Property<int>("numberOfPunishDate");

                    b.Property<int>("numberÒfDueDate");

                    b.HasKey("Id");

                    b.ToTable("DoPolicys");
                });

            modelBuilder.Entity("CoreApp.EntityFramework.Models.DoProvince", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.Property<string>("Type")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("DoProvinces");
                });

            modelBuilder.Entity("CoreApp.EntityFramework.Models.DoPublishier", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.HasKey("ID");

                    b.ToTable("DoPublishiers");
                });

            modelBuilder.Entity("CoreApp.EntityFramework.Models.DoRack", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LocationIndentifier")
                        .HasMaxLength(500);

                    b.Property<int>("Number");

                    b.HasKey("ID");

                    b.ToTable("DoRacks");
                });

            modelBuilder.Entity("CoreApp.EntityFramework.Models.DoReservationBook", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ExpectDay");

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.ToTable("DoReservationBooks");
                });

            modelBuilder.Entity("CoreApp.EntityFramework.Models.DoWard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("DistrictCode")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<Guid?>("DistrictId");

                    b.Property<string>("Location")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.Property<string>("Type")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("DoWards");
                });

            modelBuilder.Entity("CoreApp.EntityFramework.Models.Punishment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Reason")
                        .HasMaxLength(100);

                    b.Property<DateTime>("finishPunishDate");

                    b.Property<int>("pricePunishment");

                    b.Property<DateTime>("startPunishDate");

                    b.HasKey("Id");

                    b.ToTable("DoPunishments");
                });

            modelBuilder.Entity("CoreApp.EntityFramework.Models.CoreColumn", b =>
                {
                    b.HasOne("CoreApp.EntityFramework.Models.CoreDataType", "DataType")
                        .WithMany("CoreColumns")
                        .HasForeignKey("DataTypeId")
                        .HasConstraintName("FK_CoreColumns_CoreDataTypes")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoreApp.EntityFramework.Models.CoreTable", "Table")
                        .WithMany("CoreColumns")
                        .HasForeignKey("TableId")
                        .HasConstraintName("FK_CoreColumns_CoreTables")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoreApp.EntityFramework.Models.CoreConfig", b =>
                {
                    b.HasOne("CoreApp.EntityFramework.Models.CoreConfigGroup", "Group")
                        .WithMany("CoreConfigs")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("FK_CoreConfigs_CoreConfigGroups")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoreApp.EntityFramework.Models.CoreCredential", b =>
                {
                    b.HasOne("CoreApp.EntityFramework.Models.CoreCredentialType", "CredentialType")
                        .WithMany("CoreCredentials")
                        .HasForeignKey("CredentialTypeId")
                        .HasConstraintName("FK_CoreCredentials_CoreCredentialTypes")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoreApp.EntityFramework.Models.CoreUser", "User")
                        .WithMany("CoreCredentials")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CoreCredentials_CoreUsers")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoreApp.EntityFramework.Models.CoreEnumValue", b =>
                {
                    b.HasOne("CoreApp.EntityFramework.Models.CoreEnum", "Enum")
                        .WithMany("CoreEnumValues")
                        .HasForeignKey("EnumId")
                        .HasConstraintName("FK_CoreEnumValues_CoreEnums")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoreApp.EntityFramework.Models.CoreRoleModulePermission", b =>
                {
                    b.HasOne("CoreApp.EntityFramework.Models.CoreModule", "Module")
                        .WithMany("CoreRoleModulePermissions")
                        .HasForeignKey("ModuleId")
                        .HasConstraintName("FK_CoreRoleModulePermissions_CoreModules")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoreApp.EntityFramework.Models.CorePermission", "Permission")
                        .WithMany("CoreRoleModulePermissions")
                        .HasForeignKey("PermissionId")
                        .HasConstraintName("FK_CoreRoleModulePermissions_CorePermissions")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoreApp.EntityFramework.Models.CoreRole", "Role")
                        .WithMany("CoreRoleModulePermissions")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_CoreRoleModulePermissions_CoreRoles")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoreApp.EntityFramework.Models.CoreTable", b =>
                {
                    b.HasOne("CoreApp.EntityFramework.Models.CoreModule", "Module")
                        .WithMany("CoreTables")
                        .HasForeignKey("ModuleId")
                        .HasConstraintName("FK_CoreTables_CoreModules")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoreApp.EntityFramework.Models.CoreUserRole", b =>
                {
                    b.HasOne("CoreApp.EntityFramework.Models.CoreRole", "Role")
                        .WithMany("CoreUserRoles")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_CoreUserRoles_CoreRoles")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoreApp.EntityFramework.Models.CoreUser", "User")
                        .WithMany("CoreUserRoles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CoreUserRoles_CoreUsers")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoreApp.EntityFramework.Models.CoreView", b =>
                {
                    b.HasOne("CoreApp.EntityFramework.Models.CoreModule", "Module")
                        .WithMany("CoreViews")
                        .HasForeignKey("ModuleId")
                        .HasConstraintName("FK_CoreViews_CoreModules")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoreApp.EntityFramework.Models.CoreViewColumn", b =>
                {
                    b.HasOne("CoreApp.EntityFramework.Models.CoreColumn", "Column")
                        .WithMany("CoreViewColumns")
                        .HasForeignKey("ColumnId")
                        .HasConstraintName("FK_CoreViewColumns_CoreColumns");

                    b.HasOne("CoreApp.EntityFramework.Models.CoreView", "View")
                        .WithMany("CoreViewColumns")
                        .HasForeignKey("ViewId")
                        .HasConstraintName("FK_CoreViewColumns_CoreViews")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoreApp.EntityFramework.Models.DoBook", b =>
                {
                    b.HasOne("CoreApp.EntityFramework.Models.DoCatalog", "Catalog")
                        .WithMany("DoBooks")
                        .HasForeignKey("CatalogId")
                        .HasConstraintName("FK_DoBooks_DoCatalogs")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoreApp.EntityFramework.Models.DoReservationBook")
                        .WithMany("DoBooks")
                        .HasForeignKey("DoReservationBookId");

                    b.HasOne("CoreApp.EntityFramework.Models.DoPublishier", "Publishier")
                        .WithMany("DoBooks")
                        .HasForeignKey("PublishierId")
                        .HasConstraintName("FK_DoBooks_DoPublishiers")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoreApp.EntityFramework.Models.DoBookItem", b =>
                {
                    b.HasOne("CoreApp.EntityFramework.Models.DoBook", "Book")
                        .WithMany("DoBookItems")
                        .HasForeignKey("BookId")
                        .HasConstraintName("FK_DoBookItems_DoBooks")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoreApp.EntityFramework.Models.DoBookLending")
                        .WithMany("DoBookItems")
                        .HasForeignKey("DoBookLendingId");

                    b.HasOne("CoreApp.EntityFramework.Models.DoFormat", "Format")
                        .WithMany("DoBookItems")
                        .HasForeignKey("FormatId")
                        .HasConstraintName("FK_DoBookItems_DoFormats")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoreApp.EntityFramework.Models.DoRack", "Rack")
                        .WithMany("DoBookItems")
                        .HasForeignKey("RackId")
                        .HasConstraintName("FK_DoBookItems_DoRacks")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoreApp.EntityFramework.Models.DoDistrict", b =>
                {
                    b.HasOne("CoreApp.EntityFramework.Models.DoProvince", "Province")
                        .WithMany("DoDistricts")
                        .HasForeignKey("ProvinceId")
                        .HasConstraintName("FK_DoDistricts_DoProvinces")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoreApp.EntityFramework.Models.DoMember", b =>
                {
                    b.HasOne("CoreApp.EntityFramework.Models.DoBookLending")
                        .WithMany("DoMembers")
                        .HasForeignKey("DoBookLendingId");

                    b.HasOne("CoreApp.EntityFramework.Models.DoReservationBook")
                        .WithMany("DoMembers")
                        .HasForeignKey("DoReservationBookId");

                    b.HasOne("CoreApp.EntityFramework.Models.DoMemberGroup", "MemberGroup")
                        .WithMany("DoMembers")
                        .HasForeignKey("MemberGroupId")
                        .HasConstraintName("FK_DoMembers_DoMemberGroups")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoreApp.EntityFramework.Models.DoWard", b =>
                {
                    b.HasOne("CoreApp.EntityFramework.Models.DoDistrict", "District")
                        .WithMany("DoWards")
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("FK_DoWards_DoDistricts")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
