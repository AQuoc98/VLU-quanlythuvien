// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace CoreApp.EntityFramework.Models
{
    public partial class CoreAppDbContext : DbContext
    {
        public virtual DbSet<CoreColumn> CoreColumns { get; set; }
        public virtual DbSet<CoreConfig> CoreConfigs { get; set; }
        public virtual DbSet<CoreConfigGroup> CoreConfigGroups { get; set; }
        public virtual DbSet<CoreCredential> CoreCredentials { get; set; }
        public virtual DbSet<CoreCredentialType> CoreCredentialTypes { get; set; }
        public virtual DbSet<CoreDataType> CoreDataTypes { get; set; }
        public virtual DbSet<CoreEnum> CoreEnums { get; set; }
        public virtual DbSet<CoreEnumValue> CoreEnumValues { get; set; }
        public virtual DbSet<CoreEventLog> CoreEventLogs { get; set; }
        public virtual DbSet<CoreMenu> CoreMenus { get; set; }
        public virtual DbSet<CoreModule> CoreModules { get; set; }
        public virtual DbSet<CorePermission> CorePermissions { get; set; }
        public virtual DbSet<CoreRole> CoreRoles { get; set; }
        public virtual DbSet<CoreRoleModulePermission> CoreRoleModulePermissions { get; set; }
        public virtual DbSet<CoreTable> CoreTables { get; set; }
        public virtual DbSet<CoreUser> CoreUsers { get; set; }
        public virtual DbSet<CoreUserRole> CoreUserRoles { get; set; }
        public virtual DbSet<CoreView> CoreViews { get; set; }
        public virtual DbSet<CoreViewColumn> CoreViewColumns { get; set; }
        public virtual DbSet<CoreViewOrderCondition> CoreViewOrderConditions { get; set; }
        public virtual DbSet<CoreViewSearchCondition> CoreViewSearchConditions { get; set; }
        public virtual DbSet<CoreViewSpecialCondition> CoreViewSpecialConditions { get; set; }
        public virtual DbSet<DoDistrict> DoDistricts { get; set; }
        public virtual DbSet<DoProvince> DoProvinces { get; set; }
        public virtual DbSet<DoWard> DoWards { get; set; }
        public virtual DbSet<DoRack> DoRacks { get; set; }
        public virtual DbSet<DoLanguage> DoLanguages { get; set; }
        public virtual DbSet<DoCatalog> DoCatalogs { get; set; }
        public virtual DbSet<DoPublishier> DoPublishiers { get; set; }
        public virtual DbSet<DoMemberGroup> DoMemberGroups { get; set; }
        public virtual DbSet<DoAuthor> DoAuthors { get; set; }
        public virtual DbSet<DoBook> DoBooks { get; set; }
        public virtual DbSet<DoMember> DoMembers { get; set; }
        public virtual DbSet<DoBookItem> DoBookItems { get; set; }
        public virtual DbSet<DoBookLending> DoBookLendings { get; set; }
        public virtual DbSet<DoPolicy> DoPolicys { get; set; }
        public virtual DbSet<DoFormat> DoFormats { get; set; }
        public virtual DbSet<DoStatus> DoStatus { get; set; }
        public virtual DbSet<DoPunishment> DoPunishments { get; set; }
        public virtual DbSet<DoReservationBook> DoReservationBooks { get; set; }
        public CoreAppDbContext(DbContextOptions<CoreAppDbContext> options) : base(options)
        {
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CoreColumn>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Name).HasMaxLength(255);

                entity.Property(e => e.NameDict)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SqlName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.TableAlias)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.DataType)
                    .WithMany(p => p.CoreColumns)
                    .HasForeignKey(d => d.DataTypeId)
                    .HasConstraintName("FK_CoreColumns_CoreDataTypes");

                entity.HasOne(d => d.Table)
                    .WithMany(p => p.CoreColumns)
                    .HasForeignKey(d => d.TableId)
                    .HasConstraintName("FK_CoreColumns_CoreTables");
            });

            modelBuilder.Entity<CoreConfig>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("(newid())");

                entity.Property(e => e.DataType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InputType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Label).HasMaxLength(255);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Value).HasMaxLength(2000);

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.CoreConfigs)
                    .HasForeignKey(d => d.GroupId)
                    .HasConstraintName("FK_CoreConfigs_CoreConfigGroups");
            });

            modelBuilder.Entity<CoreConfigGroup>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Label).HasMaxLength(255);

                entity.Property(e => e.Name).HasMaxLength(255);
            });

            modelBuilder.Entity<CoreCredential>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Identifier)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Secret)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.CredentialType)
                    .WithMany(p => p.CoreCredentials)
                    .HasForeignKey(d => d.CredentialTypeId)
                    .HasConstraintName("FK_CoreCredentials_CoreCredentialTypes");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CoreCredentials)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_CoreCredentials_CoreUsers");
            });

            modelBuilder.Entity<CoreCredentialType>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Code)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Name).HasMaxLength(255);
            });

            modelBuilder.Entity<CoreDataType>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CoreEnum>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(255);

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<CoreEnumValue>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Code)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Image)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Name).HasMaxLength(255);

                entity.Property(e => e.Slug)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.HasOne(d => d.Enum)
                    .WithMany(p => p.CoreEnumValues)
                    .HasForeignKey(d => d.EnumId)
                    .HasConstraintName("FK_CoreEnumValues_CoreEnums");
            });

            modelBuilder.Entity<CoreEventLog>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.LogLevel).HasMaxLength(255);

                entity.Property(e => e.Logger).HasMaxLength(255);
            });

            modelBuilder.Entity<CoreMenu>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Href)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Icon)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Name).HasMaxLength(255);

                entity.Property(e => e.TitleDict)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CoreModule>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Code)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name).HasMaxLength(255);
            });

            modelBuilder.Entity<CorePermission>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Code)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Name).HasMaxLength(255);

                entity.Property(e => e.NameDict)
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CoreRole>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Code)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name).HasMaxLength(255);

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<CoreRoleModulePermission>(entity =>
            {
                entity.HasKey(e => new { e.RoleId, e.ModuleId, e.PermissionId });

                entity.HasOne(d => d.Module)
                    .WithMany(p => p.CoreRoleModulePermissions)
                    .HasForeignKey(d => d.ModuleId)
                    .HasConstraintName("FK_CoreRoleModulePermissions_CoreModules");

                entity.HasOne(d => d.Permission)
                    .WithMany(p => p.CoreRoleModulePermissions)
                    .HasForeignKey(d => d.PermissionId)
                    .HasConstraintName("FK_CoreRoleModulePermissions_CorePermissions");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.CoreRoleModulePermissions)
                    .HasForeignKey(d => d.RoleId)
                    .HasConstraintName("FK_CoreRoleModulePermissions_CoreRoles");
            });

            modelBuilder.Entity<CoreTable>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Alias)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name).HasMaxLength(255);

                entity.Property(e => e.SqlName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.HasOne(d => d.Module)
                    .WithMany(p => p.CoreTables)
                    .HasForeignKey(d => d.ModuleId)
                    .HasConstraintName("FK_CoreTables_CoreModules");
            });

            modelBuilder.Entity<CoreUser>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Name).HasMaxLength(255);

                entity.Property(e => e.Phone)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<CoreUserRole>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.RoleId });

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.CoreUserRoles)
                    .HasForeignKey(d => d.RoleId)
                    .HasConstraintName("FK_CoreUserRoles_CoreRoles");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CoreUserRoles)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_CoreUserRoles_CoreUsers");
            });



            modelBuilder.Entity<CoreView>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");

            entity.Property(e => e.Code)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.Property(e => e.CreatedDate).HasColumnType("datetime");

            entity.Property(e => e.Name).HasMaxLength(255);

            entity.HasOne(d => d.Module)
                .WithMany(p => p.CoreViews)
                .HasForeignKey(d => d.ModuleId)
                .HasConstraintName("FK_CoreViews_CoreModules");
        });

            modelBuilder.Entity<CoreViewColumn>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Width)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.Column)
                    .WithMany(p => p.CoreViewColumns)
                    .HasForeignKey(d => d.ColumnId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CoreViewColumns_CoreColumns");

                entity.HasOne(d => d.View)
                    .WithMany(p => p.CoreViewColumns)
                    .HasForeignKey(d => d.ViewId)
                    .HasConstraintName("FK_CoreViewColumns_CoreViews");
            });

            modelBuilder.Entity<CoreViewOrderCondition>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("(newid())");

                entity.Property(e => e.ColumnName)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Direction)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<CoreViewSearchCondition>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Condition)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.Value).HasMaxLength(500);
            });

            modelBuilder.Entity<CoreViewSpecialCondition>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Column)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Condition)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Operator)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Value)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.ViewIds)
                    .HasMaxLength(2000)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<DoDistrict>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Code)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Location).HasMaxLength(255);

                entity.Property(e => e.Name).HasMaxLength(255);

                entity.Property(e => e.ProviceCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Type).HasMaxLength(255);

                entity.HasOne(d => d.Province)
                    .WithMany(p => p.DoDistricts)
                    .HasForeignKey(d => d.ProvinceId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_DoDistricts_DoProvinces");
            });

            modelBuilder.Entity<DoProvince>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Code)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Name).HasMaxLength(255);

                entity.Property(e => e.Type).HasMaxLength(255);
            });

            modelBuilder.Entity<DoWard>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Code)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DistrictCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Location).HasMaxLength(255);

                entity.Property(e => e.Name).HasMaxLength(255);

                entity.Property(e => e.Type).HasMaxLength(255);

                entity.HasOne(d => d.District)
                    .WithMany(p => p.DoWards)
                    .HasForeignKey(d => d.DistrictId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_DoWards_DoDistricts");
            });
            modelBuilder.Entity<DoBookItem>(entity =>
            {
                entity.HasKey(e => new { e.Id });
                entity.HasOne(d => d.Rack)
                .WithMany(p => p.DoBookItems)
                .HasForeignKey(d => d.RackId)
                .HasConstraintName("FK_DoBookItems_DoRacks")
                 .OnDelete(DeleteBehavior.SetNull);


                entity.HasOne(d => d.Format)
               .WithMany(p => p.DoBookItems)
               .HasForeignKey(d => d.FormatId)
               .HasConstraintName("FK_DoBookItems_DoFormats")
                .OnDelete(DeleteBehavior.SetNull);


                entity.HasOne(d => d.Book)
               .WithMany(p => p.DoBookItems)
               .HasForeignKey(d => d.BookId)
               .HasConstraintName("FK_DoBookItems_DoBooks")
                .OnDelete(DeleteBehavior.SetNull);

                entity.HasOne(d => d.BookLending)
               .WithMany(p => p.DoBookItems)
               .HasForeignKey(d => d.BookLendingId)
               .HasConstraintName("FK_DoBookItems_BookLendings")
                .OnDelete(DeleteBehavior.SetNull);
                entity.HasOne(d => d.Status)
               .WithMany(p => p.DoBookItems)
               .HasForeignKey(d => d.StatusId)
               .HasConstraintName("FK_DoBookItems_DoStatus")
                .OnDelete(DeleteBehavior.SetNull);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");
                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            });
            modelBuilder.Entity<DoMember>(entity =>
            {
                entity.HasKey(e => new { e.Id });
                entity.HasOne(d => d.MemberGroup)
                .WithMany(p => p.DoMembers)
                .HasForeignKey(d => d.MemberGroupId)
                .HasConstraintName("FK_DoMembers_DoMemberGroups")
                .OnDelete(DeleteBehavior.SetNull);
                entity.Property(e => e.CreatedDate).HasColumnType("datetime");
                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            });
            modelBuilder.Entity<DoLanguage>(entity =>
            {
                entity.Property(e => e.CreatedDate).HasColumnType("datetime");
                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            });
            modelBuilder.Entity<DoMemberGroup>(entity =>
            {
                entity.Property(e => e.CreatedDate).HasColumnType("datetime");
                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            });
            modelBuilder.Entity<DoRack>(entity =>
            {
                entity.Property(e => e.CreatedDate).HasColumnType("datetime");
                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            });
            modelBuilder.Entity<DoFormat>(entity =>
            {
                entity.Property(e => e.CreatedDate).HasColumnType("datetime");
                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            });
            modelBuilder.Entity<DoMemberGroup>(entity =>
            {
                entity.Property(e => e.CreatedDate).HasColumnType("datetime");
                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            });
            modelBuilder.Entity<DoBookLending>(entity =>
            {
                entity.HasKey(e => new { e.Id });
                entity.HasOne(d => d.BookItem)
                .WithMany(p => p.DoBookLendings)
                .HasForeignKey(d => d.BookItemId)
                .HasConstraintName("FK_DoBookLendings_BookItems")
                .OnDelete(DeleteBehavior.SetNull);
                entity.HasOne(d => d.Member)
                .WithMany(p => p.DoBookLendings)
                .HasForeignKey(d => d.MemberId)
                .HasConstraintName("FK_DoBookLendings_Members")
                .OnDelete(DeleteBehavior.SetNull);
                entity.Property(e => e.DueDate).HasColumnType("datetime");
                entity.Property(e => e.BorrowedDate).HasColumnType("datetime");
                entity.Property(e => e.CreatedDate).HasColumnType("datetime");
                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            });
            modelBuilder.Entity<DoReservationBook>(entity =>
            {
                entity.HasKey(e => new { e.Id });
                entity.HasOne(d => d.Member)
                .WithMany(p => p.DoReservationBooks)
                .HasForeignKey(d => d.MemberId)
                .HasConstraintName("FK_DoReservationBooks_DoMembers")
                .OnDelete(DeleteBehavior.SetNull);
                entity.HasOne(d => d.Book)
                .WithMany(p => p.DoReservationBooks)
                .HasForeignKey(d => d.BookId)
                .HasConstraintName("FK_DoReservationBooks_DoBooks")
                .OnDelete(DeleteBehavior.SetNull);
                entity.HasOne(d => d.BookItem)
               .WithMany(p => p.DoReservationBooks)
               .HasForeignKey(d => d.BookItemId)
               .HasConstraintName("FK_DoReservationBooks_DoBookItems")
               .OnDelete(DeleteBehavior.SetNull);
                entity.Property(e => e.ReservationDate).HasColumnType("datetime");
                entity.Property(e => e.ExpectedDay).HasColumnType("datetime");
                entity.Property(e => e.CreatedDate).HasColumnType("datetime");
                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            });
            modelBuilder.Entity<DoPunishment>(entity =>
            {
                entity.HasKey(e => new { e.Id });
                entity.HasOne(d => d.Member)
               .WithMany(p => p.DoPunishments)
               .HasForeignKey(d => d.MemberId)
               .HasConstraintName("FK_DoPunishments_DoMembers")
               .OnDelete(DeleteBehavior.SetNull);
                entity.Property(e => e.PunishDate).HasColumnType("datetime");
                entity.Property(e => e.CreatedDate).HasColumnType("datetime");
                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            });
            modelBuilder.Entity<DoAuthor>(entity =>
            {
                entity.Property(e => e.CreatedDate).HasColumnType("datetime");
                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            });
            modelBuilder.Entity<DoCatalog>(entity =>
            {
                entity.Property(e => e.CreatedDate).HasColumnType("datetime");
                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            });
            modelBuilder.Entity<DoStatus>(entity =>
            {
                entity.Property(e => e.CreatedDate).HasColumnType("datetime");
                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            });
            modelBuilder.Entity<DoPolicy>(entity =>
            {
                entity.HasKey(e => new { e.Id });
                entity.HasOne(d => d.MemberGroup)
               .WithMany(p => p.DoPolicys)
               .HasForeignKey(d => d.MemberGroupId)
               .HasConstraintName("FK_DoPolicys_DoMembersGroup")
               .OnDelete(DeleteBehavior.SetNull);
                entity.Property(e => e.CreatedDate).HasColumnType("datetime");
                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            });
            modelBuilder.Entity<DoPublishier>(entity =>
            {
                entity.Property(e => e.CreatedDate).HasColumnType("datetime");
                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            });
            modelBuilder.Entity<DoBook>(entity =>
            {
                entity.HasKey(e => new { e.Id });
                entity.HasOne(d => d.Catalog)
               .WithMany(p => p.DoBooks)
               .HasForeignKey(d => d.CatalogId)
               .HasConstraintName("FK_DoBooks_DoCatalogs")
                .OnDelete(DeleteBehavior.SetNull);


                entity.HasOne(d => d.Author)
             .WithMany(p => p.DoBooks)
             .HasForeignKey(d => d.AuthorId)
             .HasConstraintName("FK_DoBooks_DoAuthors")
              .OnDelete(DeleteBehavior.SetNull);

                entity.HasOne(d => d.Publishier)
             .WithMany(p => p.DoBooks)
             .HasForeignKey(d => d.PublishierId)
             .HasConstraintName("FK_DoBooks_DoPublishiers")
              .OnDelete(DeleteBehavior.SetNull);
                entity.HasOne(d => d.Language)
             .WithMany(p => p.DoBooks)
             .HasForeignKey(d => d.LanguageId)
             .HasConstraintName("FK_DoBooks_DoLanguages")
             .OnDelete(DeleteBehavior.SetNull);



                entity.Property(e => e.CreatedDate).HasColumnType("datetime");
                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            });
            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }


}